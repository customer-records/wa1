import os
import sys
import time
import traceback
import argparse
import tempfile
import requests
import base64
import io
import hashlib
import shutil
from datetime import datetime, timedelta
from PIL import Image

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

import pytz
import schedule

# –ü–µ—á–∞—Ç—å —é–Ω–∏–∫–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ (Windows-friendly)
try:
    sys.stdout.reconfigure(encoding="utf-8", errors="replace")
except Exception:
    pass

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TARGET_TIME = "04:45"
USER_DATA_DIR = os.path.abspath("./User_Data")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê—Ä–≥—É–º–µ–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
parser = argparse.ArgumentParser(description="Publish WhatsApp story via WhatsApp Web")
parser.add_argument("image", nargs="?", help="Path to the image to publish")
parser.add_argument("--image-url", required=False, help="URL of the image to download and publish")
parser.add_argument("--headless", action="store_true", help="Run Chrome in headless mode")
args = parser.parse_args()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_image_path_by_weekday():
    weekday = datetime.now(pytz.timezone("Europe/Moscow")).weekday()
    if weekday == 6:
        return None
    index = weekday if weekday < 5 else 0  # –°—É–±–±–æ—Ç–∞ = –ø–æ–≤—Ç–æ—Ä –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    return os.path.abspath(f"story{index + 1}.JPEG")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if args.image_url:
    try:
        response = requests.get(args.image_url)
        response.raise_for_status()
        suffix = os.path.splitext(args.image_url)[1] or ".jpg"
        tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)
        tmpfile.write(response.content)
        tmpfile.close()
        IMAGE_PATH = tmpfile.name
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {IMAGE_PATH}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        sys.exit(1)
elif args.image:
    IMAGE_PATH = args.image
else:
    IMAGE_PATH = get_image_path_by_weekday()
    if IMAGE_PATH:
        print(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏: {IMAGE_PATH}")
    else:
        print("‚õî –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–æ–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def log_browser_action(driver, message):
    print(message)
    with open("automation_combined_log.txt", "a", encoding="utf-8") as log_file:
        log_file.write(f"[{datetime.now().isoformat()}] {message}\n")
        try:
            log_file.write(driver.execute_script("return document.documentElement.outerHTML") + "\n\n")
        except Exception:
            pass

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–º–æ—â–Ω–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
QR_CANVAS_SEL = "canvas[aria-label='Scan this QR code to link a device!'], canvas[aria-label*='QR']"
AUTH_MARKERS_SEL = "span[data-icon='status-refreshed'], div[data-testid='chat-list']"

def is_authorized(driver):
    return len(driver.find_elements(By.CSS_SELECTOR, AUTH_MARKERS_SEL)) > 0

def has_qr(driver):
    return len(driver.find_elements(By.CSS_SELECTOR, QR_CANVAS_SEL)) > 0

def wait_for_qr_or_auth(driver, timeout=60):
    """–ñ–¥—ë–º –ª–∏–±–æ QR –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –ª–∏–±–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'qr' –∏–ª–∏ 'authorized'."""
    def _cond(d):
        if is_authorized(d):
            return "authorized"
        if has_qr(d):
            return "qr"
        return False
    return WebDriverWait(driver, timeout).until(_cond)

def wait_until_authorized(driver, timeout=180):
    WebDriverWait(driver, timeout).until(lambda d: is_authorized(d))
    return True

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∏—Å—É–µ–º QR –∏–∑ PNG-–±–∞–π—Ç–æ–≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ (–ø–æ–¥ —à–∏—Ä–∏–Ω—É —Ç–µ—Ä–º–∏–Ω–∞–ª–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def draw_png_qr_to_console(png_bytes, max_width_chars=None):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PNG (canvas) –≤ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π ASCII-QR.
    –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–ª—É–±–ª–æ–∫–∏ ‚ñÄ ‚ñÑ ‚ñà, –≤—ã—Å–æ—Ç–∞ –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ —à–∏—Ä–∏–Ω—ã.
    """
    cols, _rows = shutil.get_terminal_size(fallback=(80, 24))
    if max_width_chars is None:
        max_width_chars = max(30, min(cols - 2, 100))

    img = Image.open(io.BytesIO(png_bytes)).convert("L")
    w, h = img.size
    if w > max_width_chars:
        scale = w / max_width_chars
        new_w = int(round(w / scale))
        new_h = int(round(h / scale))
    else:
        new_w, new_h = w, h
    if new_h % 2 == 1:
        new_h -= 1
    img_small = img.resize((max(1, new_w), max(2, new_h)), resample=Image.NEAREST)
    px = img_small.load()

    TH = 160
    def is_black(x, y): return px[x, y] < TH

    for y in range(0, img_small.height, 2):
        line = []
        for x in range(img_small.width):
            top = is_black(x, y)
            bot = is_black(x, y + 1) if y + 1 < img_small.height else False
            if top and bot:   ch = "‚ñà"
            elif top:         ch = "‚ñÄ"
            elif bot:         ch = "‚ñÑ"
            else:             ch = " "
            line.append(ch)
        print("".join(line))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–∫–∞–∑/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ QR –≤ –∫–æ–Ω—Å–æ–ª–∏ (–ø–æ–ª–ª–∏–Ω–≥ canvas) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def show_qr_code_in_console(driver, watch_seconds=180, poll_interval=1.0):
    """
    –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —Å–Ω–∏–º–∞–µ–º canvas -> PNG –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º ASCII-QR,
    –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –∏–ª–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É.
    """
    print("üì∏ –û–∂–∏–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º QR-–∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    start = time.time()
    last_sig = None

    def grab_png():
        try:
            data_url = driver.execute_script(f"""
                const c = document.querySelector("{QR_CANVAS_SEL}");
                return c ? c.toDataURL('image/png') : null;
            """)
            if not data_url or not data_url.startswith("data:image"):
                return None, None
            b64 = data_url.split(",", 1)[1]
            png_bytes = base64.b64decode(b64)
            sig = hashlib.md5(png_bytes).hexdigest()
            return png_bytes, sig
        except Exception:
            return None, None

    while time.time() - start < watch_seconds:
        if is_authorized(driver):
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚Äî QR –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω.")
            return True

        png_bytes, sig = grab_png()
        if png_bytes and sig and sig != last_sig:
            last_sig = sig
            print("\n" + "‚îÄ" * 52)
            print("üîÅ –ù–æ–≤—ã–π QR-–∫–æ–¥ (–æ–±–Ω–æ–≤–∏–ª—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ):")
            draw_png_qr_to_console(png_bytes)

        time.sleep(poll_interval)

    print("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è QR –∏—Å—Ç–µ–∫–ª–æ.")
    return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def check_or_authenticate_session():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    options = webdriver.ChromeOptions()
    options.add_argument("--window-size=1280,800")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument(f"--user-data-dir={USER_DATA_DIR}")  # —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –Ω–æ –ù–ï —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if args.headless:
        options.add_argument("--headless=new")
        options.add_argument("--disable-gpu")

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

    try:
        driver.get("https://web.whatsapp.com/")
        state = wait_for_qr_or_auth(driver, timeout=60)

        if state == "qr":
            print("üì∏ QR-–∫–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            show_qr_code_in_console(driver)
            wait_until_authorized(driver, timeout=180)
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        else:
            print("‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ (–±–µ–∑ QR).")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    finally:
        driver.quit()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def publish_story():
    now_msk = datetime.now(pytz.timezone("Europe/Moscow"))
    print(f"\nüïí {now_msk.strftime('%Y-%m-%d %H:%M:%S')} ‚Äî –∑–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

    if now_msk.weekday() == 6:
        print("‚è∏ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return

    options = webdriver.ChromeOptions()
    options.add_argument("--window-size=1280,800")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument(f"--user-data-dir={USER_DATA_DIR}")  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ –¥–æ–≤–µ—Ä—è–µ–º –µ–º—É –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É –ª–æ–≥–∏–Ω–∞
    if args.headless:
        options.add_argument("--headless=new")
        options.add_argument("--disable-gpu")

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

    try:
        log_browser_action(driver, "üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º WhatsApp Web...")
        driver.get("https://web.whatsapp.com/")
        log_browser_action(driver, "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

        state = wait_for_qr_or_auth(driver, timeout=60)
        if state == "qr":
            log_browser_action(driver, "üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω QR-–∫–æ–¥. –ñ–¥—ë–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            show_qr_code_in_console(driver)
            wait_until_authorized(driver, timeout=180)
            print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
        else:
            log_browser_action(driver, "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è WhatsApp –Ω–∞–π–¥–µ–Ω–∞.")

        wait = WebDriverWait(driver, 60)
        status_icon = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "span[data-icon='status-refreshed']")))
        status_button = status_icon.find_element(By.XPATH, './ancestor::button')

        try:
            WebDriverWait(driver, 10).until_not(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div[role='dialog']"))
            )
        except Exception:
            log_browser_action(driver, "‚ÑπÔ∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∏—Å—á–µ–∑–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        driver.execute_script("arguments[0].click();", status_button)
        log_browser_action(driver, "üëâ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç—É—Å–∞")
        time.sleep(2)

        add_status_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@aria-label='Add Status' or contains(@title, '—Å—Ç–∞—Ç—É—Å')]")))
        try:
            add_status_button.click()
        except Exception:
            driver.execute_script("arguments[0].click();", add_status_button)

        log_browser_action(driver, "üëâ –ö–Ω–æ–ø–∫–∞ '–¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å'")
        time.sleep(1)

        media_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//li[@role='button']//span[contains(text(), '–§–æ—Ç–æ') or contains(text(), 'Photo')]")))
        media_button.click()
        log_browser_action(driver, "üëâ –ö–Ω–æ–ø–∫–∞ '–§–æ—Ç–æ'")
        time.sleep(1)

        file_path = os.path.abspath(IMAGE_PATH)
        if not os.path.isfile(file_path):
            log_browser_action(driver, f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return

        file_input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='file']")))
        file_input.send_keys(file_path)
        time.sleep(1)

        try:
            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "div[aria-label*='–ü—Ä–æ—Å–º–æ—Ç—Ä']")))
            log_browser_action(driver, "üëÄ Preview –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception:
            log_browser_action(driver, "‚ö†Ô∏è Preview –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            preview_confirm = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, "//div[@role='button' and (@aria-label='–ì–æ—Ç–æ–≤–æ' or @aria-label='Done')]"))
            )
            preview_confirm.click()
            log_browser_action(driver, "üëâ –ö–ª–∏–∫ –ø–æ '–ì–æ—Ç–æ–≤–æ'")
        except Exception:
            log_browser_action(driver, "‚ÑπÔ∏è '–ì–æ—Ç–æ–≤–æ' –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        send_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[@role='button' and @aria-label='–û—Ç–ø—Ä–∞–≤–∏—Ç—å']")))
        send_button.click()
        log_browser_action(driver, "‚úÖ –°—Ç–æ—Ä–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        print("‚è≥ –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ —Å—Ç–∞—Ç—É—Å –≤—ã–π–¥–µ—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è '–û—Ç–ø—Ä–∞–≤–∫–∞...'")
        for _ in range(24):
            try:
                driver.find_element(By.XPATH, "//span[contains(text(),'–û—Ç–ø—Ä–∞–≤–∫–∞')]")
                print("‚è≥ –í—Å–µ –µ—â–µ '–û—Ç–ø—Ä–∞–≤–∫–∞...' ‚Äî –∂–¥–µ–º –µ—â—ë...")
                time.sleep(5)
            except Exception:
                print("‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ '–û—Ç–ø—Ä–∞–≤–∫–∞...' –∏—Å—á–µ–∑–ª–∞!")
                break

        time.sleep(3)

    except Exception as e:
        log_browser_action(driver, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
    finally:
        driver.quit()
        print("üëã –ì–æ—Ç–æ–≤–æ. –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def log_and_publish():
    global IMAGE_PATH
    IMAGE_PATH = get_image_path_by_weekday()
    if IMAGE_PATH:
        publish_story()
    else:
        print("‚è∏ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –∑–∞–¥–∞—á–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")

    schedule.clear()
    schedule.every().day.at(TARGET_TIME).do(log_and_publish)

    next_run = schedule.next_run()
    if next_run:
        print(f"üìÜ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {next_run.strftime('%Y-%m-%d %H:%M:%S')} (MSK)")

def run_schedule():
    check_or_authenticate_session()
    tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(tz)
    today_target = tz.localize(datetime.combine(now.date(), datetime.strptime(TARGET_TIME, "%H:%M").time()))

    if now >= today_target:
        print("üïí –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")
        schedule.every().day.at(TARGET_TIME).do(log_and_publish)
    else:
        print("üïí –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ—â—ë –≤–ø–µ—Ä–µ–¥–∏ ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        schedule.every().day.at(TARGET_TIME).do(log_and_publish)

    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    run_schedule()